// Code generated by ent, DO NOT EDIT.

package machine

import (
	"api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// LiftHeight applies equality check predicate on the "liftHeight" field. It's identical to LiftHeightEQ.
func LiftHeight(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiftHeight), v))
	})
}

// MotorHours applies equality check predicate on the "motorHours" field. It's identical to MotorHoursEQ.
func MotorHours(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMotorHours), v))
	})
}

// Drive applies equality check predicate on the "drive" field. It's identical to DriveEQ.
func Drive(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrive), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// LoadCapacity applies equality check predicate on the "loadCapacity" field. It's identical to LoadCapacityEQ.
func LoadCapacity(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadCapacity), v))
	})
}

// RentPrice applies equality check predicate on the "rentPrice" field. It's identical to RentPriceEQ.
func RentPrice(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentPrice), v))
	})
}

// SalePrice applies equality check predicate on the "salePrice" field. It's identical to SalePriceEQ.
func SalePrice(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalePrice), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Hidden applies equality check predicate on the "hidden" field. It's identical to HiddenEQ.
func Hidden(v bool) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHidden), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NumberOfImages applies equality check predicate on the "numberOfImages" field. It's identical to NumberOfImagesEQ.
func NumberOfImages(v int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfImages), v))
	})
}

// InternalDescription applies equality check predicate on the "internalDescription" field. It's identical to InternalDescriptionEQ.
func InternalDescription(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInternalDescription), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// LiftHeightEQ applies the EQ predicate on the "liftHeight" field.
func LiftHeightEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightNEQ applies the NEQ predicate on the "liftHeight" field.
func LiftHeightNEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightIn applies the In predicate on the "liftHeight" field.
func LiftHeightIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLiftHeight), v...))
	})
}

// LiftHeightNotIn applies the NotIn predicate on the "liftHeight" field.
func LiftHeightNotIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLiftHeight), v...))
	})
}

// LiftHeightGT applies the GT predicate on the "liftHeight" field.
func LiftHeightGT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightGTE applies the GTE predicate on the "liftHeight" field.
func LiftHeightGTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightLT applies the LT predicate on the "liftHeight" field.
func LiftHeightLT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightLTE applies the LTE predicate on the "liftHeight" field.
func LiftHeightLTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiftHeight), v))
	})
}

// MotorHoursEQ applies the EQ predicate on the "motorHours" field.
func MotorHoursEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMotorHours), v))
	})
}

// MotorHoursNEQ applies the NEQ predicate on the "motorHours" field.
func MotorHoursNEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMotorHours), v))
	})
}

// MotorHoursIn applies the In predicate on the "motorHours" field.
func MotorHoursIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMotorHours), v...))
	})
}

// MotorHoursNotIn applies the NotIn predicate on the "motorHours" field.
func MotorHoursNotIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMotorHours), v...))
	})
}

// MotorHoursGT applies the GT predicate on the "motorHours" field.
func MotorHoursGT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMotorHours), v))
	})
}

// MotorHoursGTE applies the GTE predicate on the "motorHours" field.
func MotorHoursGTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMotorHours), v))
	})
}

// MotorHoursLT applies the LT predicate on the "motorHours" field.
func MotorHoursLT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMotorHours), v))
	})
}

// MotorHoursLTE applies the LTE predicate on the "motorHours" field.
func MotorHoursLTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMotorHours), v))
	})
}

// DriveEQ applies the EQ predicate on the "drive" field.
func DriveEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrive), v))
	})
}

// DriveNEQ applies the NEQ predicate on the "drive" field.
func DriveNEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDrive), v))
	})
}

// DriveIn applies the In predicate on the "drive" field.
func DriveIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDrive), v...))
	})
}

// DriveNotIn applies the NotIn predicate on the "drive" field.
func DriveNotIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDrive), v...))
	})
}

// DriveGT applies the GT predicate on the "drive" field.
func DriveGT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDrive), v))
	})
}

// DriveGTE applies the GTE predicate on the "drive" field.
func DriveGTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDrive), v))
	})
}

// DriveLT applies the LT predicate on the "drive" field.
func DriveLT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDrive), v))
	})
}

// DriveLTE applies the LTE predicate on the "drive" field.
func DriveLTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDrive), v))
	})
}

// DriveContains applies the Contains predicate on the "drive" field.
func DriveContains(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDrive), v))
	})
}

// DriveHasPrefix applies the HasPrefix predicate on the "drive" field.
func DriveHasPrefix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDrive), v))
	})
}

// DriveHasSuffix applies the HasSuffix predicate on the "drive" field.
func DriveHasSuffix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDrive), v))
	})
}

// DriveEqualFold applies the EqualFold predicate on the "drive" field.
func DriveEqualFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDrive), v))
	})
}

// DriveContainsFold applies the ContainsFold predicate on the "drive" field.
func DriveContainsFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDrive), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// LoadCapacityEQ applies the EQ predicate on the "loadCapacity" field.
func LoadCapacityEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityNEQ applies the NEQ predicate on the "loadCapacity" field.
func LoadCapacityNEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityIn applies the In predicate on the "loadCapacity" field.
func LoadCapacityIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLoadCapacity), v...))
	})
}

// LoadCapacityNotIn applies the NotIn predicate on the "loadCapacity" field.
func LoadCapacityNotIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLoadCapacity), v...))
	})
}

// LoadCapacityGT applies the GT predicate on the "loadCapacity" field.
func LoadCapacityGT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityGTE applies the GTE predicate on the "loadCapacity" field.
func LoadCapacityGTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityLT applies the LT predicate on the "loadCapacity" field.
func LoadCapacityLT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityLTE applies the LTE predicate on the "loadCapacity" field.
func LoadCapacityLTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoadCapacity), v))
	})
}

// RentPriceEQ applies the EQ predicate on the "rentPrice" field.
func RentPriceEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentPrice), v))
	})
}

// RentPriceNEQ applies the NEQ predicate on the "rentPrice" field.
func RentPriceNEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRentPrice), v))
	})
}

// RentPriceIn applies the In predicate on the "rentPrice" field.
func RentPriceIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRentPrice), v...))
	})
}

// RentPriceNotIn applies the NotIn predicate on the "rentPrice" field.
func RentPriceNotIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRentPrice), v...))
	})
}

// RentPriceGT applies the GT predicate on the "rentPrice" field.
func RentPriceGT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRentPrice), v))
	})
}

// RentPriceGTE applies the GTE predicate on the "rentPrice" field.
func RentPriceGTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRentPrice), v))
	})
}

// RentPriceLT applies the LT predicate on the "rentPrice" field.
func RentPriceLT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRentPrice), v))
	})
}

// RentPriceLTE applies the LTE predicate on the "rentPrice" field.
func RentPriceLTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRentPrice), v))
	})
}

// RentPriceIsNil applies the IsNil predicate on the "rentPrice" field.
func RentPriceIsNil() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRentPrice)))
	})
}

// RentPriceNotNil applies the NotNil predicate on the "rentPrice" field.
func RentPriceNotNil() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRentPrice)))
	})
}

// SalePriceEQ applies the EQ predicate on the "salePrice" field.
func SalePriceEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalePrice), v))
	})
}

// SalePriceNEQ applies the NEQ predicate on the "salePrice" field.
func SalePriceNEQ(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalePrice), v))
	})
}

// SalePriceIn applies the In predicate on the "salePrice" field.
func SalePriceIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSalePrice), v...))
	})
}

// SalePriceNotIn applies the NotIn predicate on the "salePrice" field.
func SalePriceNotIn(vs ...uint) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSalePrice), v...))
	})
}

// SalePriceGT applies the GT predicate on the "salePrice" field.
func SalePriceGT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalePrice), v))
	})
}

// SalePriceGTE applies the GTE predicate on the "salePrice" field.
func SalePriceGTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalePrice), v))
	})
}

// SalePriceLT applies the LT predicate on the "salePrice" field.
func SalePriceLT(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalePrice), v))
	})
}

// SalePriceLTE applies the LTE predicate on the "salePrice" field.
func SalePriceLTE(v uint) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalePrice), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HiddenEQ applies the EQ predicate on the "hidden" field.
func HiddenEQ(v bool) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHidden), v))
	})
}

// HiddenNEQ applies the NEQ predicate on the "hidden" field.
func HiddenNEQ(v bool) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHidden), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// NumberOfImagesEQ applies the EQ predicate on the "numberOfImages" field.
func NumberOfImagesEQ(v int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfImages), v))
	})
}

// NumberOfImagesNEQ applies the NEQ predicate on the "numberOfImages" field.
func NumberOfImagesNEQ(v int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumberOfImages), v))
	})
}

// NumberOfImagesIn applies the In predicate on the "numberOfImages" field.
func NumberOfImagesIn(vs ...int) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNumberOfImages), v...))
	})
}

// NumberOfImagesNotIn applies the NotIn predicate on the "numberOfImages" field.
func NumberOfImagesNotIn(vs ...int) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNumberOfImages), v...))
	})
}

// NumberOfImagesGT applies the GT predicate on the "numberOfImages" field.
func NumberOfImagesGT(v int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumberOfImages), v))
	})
}

// NumberOfImagesGTE applies the GTE predicate on the "numberOfImages" field.
func NumberOfImagesGTE(v int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumberOfImages), v))
	})
}

// NumberOfImagesLT applies the LT predicate on the "numberOfImages" field.
func NumberOfImagesLT(v int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumberOfImages), v))
	})
}

// NumberOfImagesLTE applies the LTE predicate on the "numberOfImages" field.
func NumberOfImagesLTE(v int) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumberOfImages), v))
	})
}

// NumberOfImagesIsNil applies the IsNil predicate on the "numberOfImages" field.
func NumberOfImagesIsNil() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNumberOfImages)))
	})
}

// NumberOfImagesNotNil applies the NotNil predicate on the "numberOfImages" field.
func NumberOfImagesNotNil() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNumberOfImages)))
	})
}

// InternalDescriptionEQ applies the EQ predicate on the "internalDescription" field.
func InternalDescriptionEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionNEQ applies the NEQ predicate on the "internalDescription" field.
func InternalDescriptionNEQ(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionIn applies the In predicate on the "internalDescription" field.
func InternalDescriptionIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInternalDescription), v...))
	})
}

// InternalDescriptionNotIn applies the NotIn predicate on the "internalDescription" field.
func InternalDescriptionNotIn(vs ...string) predicate.Machine {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInternalDescription), v...))
	})
}

// InternalDescriptionGT applies the GT predicate on the "internalDescription" field.
func InternalDescriptionGT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionGTE applies the GTE predicate on the "internalDescription" field.
func InternalDescriptionGTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionLT applies the LT predicate on the "internalDescription" field.
func InternalDescriptionLT(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionLTE applies the LTE predicate on the "internalDescription" field.
func InternalDescriptionLTE(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionContains applies the Contains predicate on the "internalDescription" field.
func InternalDescriptionContains(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionHasPrefix applies the HasPrefix predicate on the "internalDescription" field.
func InternalDescriptionHasPrefix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionHasSuffix applies the HasSuffix predicate on the "internalDescription" field.
func InternalDescriptionHasSuffix(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionIsNil applies the IsNil predicate on the "internalDescription" field.
func InternalDescriptionIsNil() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInternalDescription)))
	})
}

// InternalDescriptionNotNil applies the NotNil predicate on the "internalDescription" field.
func InternalDescriptionNotNil() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInternalDescription)))
	})
}

// InternalDescriptionEqualFold applies the EqualFold predicate on the "internalDescription" field.
func InternalDescriptionEqualFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInternalDescription), v))
	})
}

// InternalDescriptionContainsFold applies the ContainsFold predicate on the "internalDescription" field.
func InternalDescriptionContainsFold(v string) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInternalDescription), v))
	})
}

// HasMachineSpecification applies the HasEdge predicate on the "machineSpecification" edge.
func HasMachineSpecification() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MachineSpecificationTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MachineSpecificationTable, MachineSpecificationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMachineSpecificationWith applies the HasEdge predicate on the "machineSpecification" edge with a given conditions (other predicates).
func HasMachineSpecificationWith(preds ...predicate.MachineSpecification) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MachineSpecificationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MachineSpecificationTable, MachineSpecificationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMachineAccessories applies the HasEdge predicate on the "machineAccessories" edge.
func HasMachineAccessories() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MachineAccessoriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MachineAccessoriesTable, MachineAccessoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMachineAccessoriesWith applies the HasEdge predicate on the "machineAccessories" edge with a given conditions (other predicates).
func HasMachineAccessoriesWith(preds ...predicate.MachineAccessories) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MachineAccessoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MachineAccessoriesTable, MachineAccessoriesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Machine) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Machine) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Machine) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		p(s.Not())
	})
}
