// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/machine"
	"api/ent/machineaccessories"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// MachineAccessories is the model entity for the MachineAccessories schema.
type MachineAccessories struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name1 holds the value of the "name1" field.
	Name1 string `json:"name1,omitempty"`
	// Name2 holds the value of the "name2" field.
	Name2 string `json:"name2,omitempty"`
	// Name3 holds the value of the "name3" field.
	Name3 string `json:"name3,omitempty"`
	// Name4 holds the value of the "name4" field.
	Name4 string `json:"name4,omitempty"`
	// Name5 holds the value of the "name5" field.
	Name5 string `json:"name5,omitempty"`
	// Name6 holds the value of the "name6" field.
	Name6 string `json:"name6,omitempty"`
	// Name7 holds the value of the "name7" field.
	Name7 string `json:"name7,omitempty"`
	// Name8 holds the value of the "name8" field.
	Name8 string `json:"name8,omitempty"`
	// Name9 holds the value of the "name9" field.
	Name9 string `json:"name9,omitempty"`
	// Name10 holds the value of the "name10" field.
	Name10 string `json:"name10,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MachineAccessoriesQuery when eager-loading is set.
	Edges                       MachineAccessoriesEdges `json:"edges"`
	machine_machine_accessories *int
}

// MachineAccessoriesEdges holds the relations/edges for other nodes in the graph.
type MachineAccessoriesEdges struct {
	// Machine holds the value of the machine edge.
	Machine *Machine `json:"machine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MachineOrErr returns the Machine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MachineAccessoriesEdges) MachineOrErr() (*Machine, error) {
	if e.loadedTypes[0] {
		if e.Machine == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: machine.Label}
		}
		return e.Machine, nil
	}
	return nil, &NotLoadedError{edge: "machine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MachineAccessories) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case machineaccessories.FieldID:
			values[i] = new(sql.NullInt64)
		case machineaccessories.FieldName1, machineaccessories.FieldName2, machineaccessories.FieldName3, machineaccessories.FieldName4, machineaccessories.FieldName5, machineaccessories.FieldName6, machineaccessories.FieldName7, machineaccessories.FieldName8, machineaccessories.FieldName9, machineaccessories.FieldName10:
			values[i] = new(sql.NullString)
		case machineaccessories.ForeignKeys[0]: // machine_machine_accessories
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MachineAccessories", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MachineAccessories fields.
func (ma *MachineAccessories) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case machineaccessories.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ma.ID = int(value.Int64)
		case machineaccessories.FieldName1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name1", values[i])
			} else if value.Valid {
				ma.Name1 = value.String
			}
		case machineaccessories.FieldName2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name2", values[i])
			} else if value.Valid {
				ma.Name2 = value.String
			}
		case machineaccessories.FieldName3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name3", values[i])
			} else if value.Valid {
				ma.Name3 = value.String
			}
		case machineaccessories.FieldName4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name4", values[i])
			} else if value.Valid {
				ma.Name4 = value.String
			}
		case machineaccessories.FieldName5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name5", values[i])
			} else if value.Valid {
				ma.Name5 = value.String
			}
		case machineaccessories.FieldName6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name6", values[i])
			} else if value.Valid {
				ma.Name6 = value.String
			}
		case machineaccessories.FieldName7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name7", values[i])
			} else if value.Valid {
				ma.Name7 = value.String
			}
		case machineaccessories.FieldName8:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name8", values[i])
			} else if value.Valid {
				ma.Name8 = value.String
			}
		case machineaccessories.FieldName9:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name9", values[i])
			} else if value.Valid {
				ma.Name9 = value.String
			}
		case machineaccessories.FieldName10:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name10", values[i])
			} else if value.Valid {
				ma.Name10 = value.String
			}
		case machineaccessories.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field machine_machine_accessories", value)
			} else if value.Valid {
				ma.machine_machine_accessories = new(int)
				*ma.machine_machine_accessories = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMachine queries the "machine" edge of the MachineAccessories entity.
func (ma *MachineAccessories) QueryMachine() *MachineQuery {
	return (&MachineAccessoriesClient{config: ma.config}).QueryMachine(ma)
}

// Update returns a builder for updating this MachineAccessories.
// Note that you need to call MachineAccessories.Unwrap() before calling this method if this MachineAccessories
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MachineAccessories) Update() *MachineAccessoriesUpdateOne {
	return (&MachineAccessoriesClient{config: ma.config}).UpdateOne(ma)
}

// Unwrap unwraps the MachineAccessories entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MachineAccessories) Unwrap() *MachineAccessories {
	_tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MachineAccessories is not a transactional entity")
	}
	ma.config.driver = _tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MachineAccessories) String() string {
	var builder strings.Builder
	builder.WriteString("MachineAccessories(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ma.ID))
	builder.WriteString("name1=")
	builder.WriteString(ma.Name1)
	builder.WriteString(", ")
	builder.WriteString("name2=")
	builder.WriteString(ma.Name2)
	builder.WriteString(", ")
	builder.WriteString("name3=")
	builder.WriteString(ma.Name3)
	builder.WriteString(", ")
	builder.WriteString("name4=")
	builder.WriteString(ma.Name4)
	builder.WriteString(", ")
	builder.WriteString("name5=")
	builder.WriteString(ma.Name5)
	builder.WriteString(", ")
	builder.WriteString("name6=")
	builder.WriteString(ma.Name6)
	builder.WriteString(", ")
	builder.WriteString("name7=")
	builder.WriteString(ma.Name7)
	builder.WriteString(", ")
	builder.WriteString("name8=")
	builder.WriteString(ma.Name8)
	builder.WriteString(", ")
	builder.WriteString("name9=")
	builder.WriteString(ma.Name9)
	builder.WriteString(", ")
	builder.WriteString("name10=")
	builder.WriteString(ma.Name10)
	builder.WriteByte(')')
	return builder.String()
}

// MachineAccessoriesSlice is a parsable slice of MachineAccessories.
type MachineAccessoriesSlice []*MachineAccessories

func (ma MachineAccessoriesSlice) config(cfg config) {
	for _i := range ma {
		ma[_i].config = cfg
	}
}
