// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/machine"
	"api/ent/machinespecification"
	"api/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MachineSpecificationUpdate is the builder for updating MachineSpecification entities.
type MachineSpecificationUpdate struct {
	config
	hooks    []Hook
	mutation *MachineSpecificationMutation
}

// Where appends a list predicates to the MachineSpecificationUpdate builder.
func (msu *MachineSpecificationUpdate) Where(ps ...predicate.MachineSpecification) *MachineSpecificationUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetMachineNumber sets the "machineNumber" field.
func (msu *MachineSpecificationUpdate) SetMachineNumber(i int) *MachineSpecificationUpdate {
	msu.mutation.ResetMachineNumber()
	msu.mutation.SetMachineNumber(i)
	return msu
}

// AddMachineNumber adds i to the "machineNumber" field.
func (msu *MachineSpecificationUpdate) AddMachineNumber(i int) *MachineSpecificationUpdate {
	msu.mutation.AddMachineNumber(i)
	return msu
}

// SetMachineType sets the "machineType" field.
func (msu *MachineSpecificationUpdate) SetMachineType(s string) *MachineSpecificationUpdate {
	msu.mutation.SetMachineType(s)
	return msu
}

// SetDrive sets the "drive" field.
func (msu *MachineSpecificationUpdate) SetDrive(s string) *MachineSpecificationUpdate {
	msu.mutation.SetDrive(s)
	return msu
}

// SetLoadCapacity sets the "loadCapacity" field.
func (msu *MachineSpecificationUpdate) SetLoadCapacity(u uint) *MachineSpecificationUpdate {
	msu.mutation.ResetLoadCapacity()
	msu.mutation.SetLoadCapacity(u)
	return msu
}

// AddLoadCapacity adds u to the "loadCapacity" field.
func (msu *MachineSpecificationUpdate) AddLoadCapacity(u int) *MachineSpecificationUpdate {
	msu.mutation.AddLoadCapacity(u)
	return msu
}

// SetYear sets the "year" field.
func (msu *MachineSpecificationUpdate) SetYear(u uint) *MachineSpecificationUpdate {
	msu.mutation.ResetYear()
	msu.mutation.SetYear(u)
	return msu
}

// AddYear adds u to the "year" field.
func (msu *MachineSpecificationUpdate) AddYear(u int) *MachineSpecificationUpdate {
	msu.mutation.AddYear(u)
	return msu
}

// SetMotorHours sets the "motorHours" field.
func (msu *MachineSpecificationUpdate) SetMotorHours(u uint) *MachineSpecificationUpdate {
	msu.mutation.ResetMotorHours()
	msu.mutation.SetMotorHours(u)
	return msu
}

// AddMotorHours adds u to the "motorHours" field.
func (msu *MachineSpecificationUpdate) AddMotorHours(u int) *MachineSpecificationUpdate {
	msu.mutation.AddMotorHours(u)
	return msu
}

// SetPassingHeight sets the "passingHeight" field.
func (msu *MachineSpecificationUpdate) SetPassingHeight(u uint) *MachineSpecificationUpdate {
	msu.mutation.ResetPassingHeight()
	msu.mutation.SetPassingHeight(u)
	return msu
}

// SetNillablePassingHeight sets the "passingHeight" field if the given value is not nil.
func (msu *MachineSpecificationUpdate) SetNillablePassingHeight(u *uint) *MachineSpecificationUpdate {
	if u != nil {
		msu.SetPassingHeight(*u)
	}
	return msu
}

// AddPassingHeight adds u to the "passingHeight" field.
func (msu *MachineSpecificationUpdate) AddPassingHeight(u int) *MachineSpecificationUpdate {
	msu.mutation.AddPassingHeight(u)
	return msu
}

// ClearPassingHeight clears the value of the "passingHeight" field.
func (msu *MachineSpecificationUpdate) ClearPassingHeight() *MachineSpecificationUpdate {
	msu.mutation.ClearPassingHeight()
	return msu
}

// SetLiftHeight sets the "liftHeight" field.
func (msu *MachineSpecificationUpdate) SetLiftHeight(u uint) *MachineSpecificationUpdate {
	msu.mutation.ResetLiftHeight()
	msu.mutation.SetLiftHeight(u)
	return msu
}

// AddLiftHeight adds u to the "liftHeight" field.
func (msu *MachineSpecificationUpdate) AddLiftHeight(u int) *MachineSpecificationUpdate {
	msu.mutation.AddLiftHeight(u)
	return msu
}

// SetWeight sets the "weight" field.
func (msu *MachineSpecificationUpdate) SetWeight(u uint) *MachineSpecificationUpdate {
	msu.mutation.ResetWeight()
	msu.mutation.SetWeight(u)
	return msu
}

// AddWeight adds u to the "weight" field.
func (msu *MachineSpecificationUpdate) AddWeight(u int) *MachineSpecificationUpdate {
	msu.mutation.AddWeight(u)
	return msu
}

// SetForks sets the "forks" field.
func (msu *MachineSpecificationUpdate) SetForks(s string) *MachineSpecificationUpdate {
	msu.mutation.SetForks(s)
	return msu
}

// SetMastType sets the "mastType" field.
func (msu *MachineSpecificationUpdate) SetMastType(s string) *MachineSpecificationUpdate {
	msu.mutation.SetMastType(s)
	return msu
}

// SetNillableMastType sets the "mastType" field if the given value is not nil.
func (msu *MachineSpecificationUpdate) SetNillableMastType(s *string) *MachineSpecificationUpdate {
	if s != nil {
		msu.SetMastType(*s)
	}
	return msu
}

// ClearMastType clears the value of the "mastType" field.
func (msu *MachineSpecificationUpdate) ClearMastType() *MachineSpecificationUpdate {
	msu.mutation.ClearMastType()
	return msu
}

// SetAdditionalAttributes sets the "additionalAttributes" field.
func (msu *MachineSpecificationUpdate) SetAdditionalAttributes(s string) *MachineSpecificationUpdate {
	msu.mutation.SetAdditionalAttributes(s)
	return msu
}

// SetNillableAdditionalAttributes sets the "additionalAttributes" field if the given value is not nil.
func (msu *MachineSpecificationUpdate) SetNillableAdditionalAttributes(s *string) *MachineSpecificationUpdate {
	if s != nil {
		msu.SetAdditionalAttributes(*s)
	}
	return msu
}

// ClearAdditionalAttributes clears the value of the "additionalAttributes" field.
func (msu *MachineSpecificationUpdate) ClearAdditionalAttributes() *MachineSpecificationUpdate {
	msu.mutation.ClearAdditionalAttributes()
	return msu
}

// SetEquipment sets the "equipment" field.
func (msu *MachineSpecificationUpdate) SetEquipment(s string) *MachineSpecificationUpdate {
	msu.mutation.SetEquipment(s)
	return msu
}

// SetNillableEquipment sets the "equipment" field if the given value is not nil.
func (msu *MachineSpecificationUpdate) SetNillableEquipment(s *string) *MachineSpecificationUpdate {
	if s != nil {
		msu.SetEquipment(*s)
	}
	return msu
}

// ClearEquipment clears the value of the "equipment" field.
func (msu *MachineSpecificationUpdate) ClearEquipment() *MachineSpecificationUpdate {
	msu.mutation.ClearEquipment()
	return msu
}

// SetEngine sets the "engine" field.
func (msu *MachineSpecificationUpdate) SetEngine(s string) *MachineSpecificationUpdate {
	msu.mutation.SetEngine(s)
	return msu
}

// SetHydraulicControl sets the "hydraulicControl" field.
func (msu *MachineSpecificationUpdate) SetHydraulicControl(s string) *MachineSpecificationUpdate {
	msu.mutation.SetHydraulicControl(s)
	return msu
}

// SetDriveControl sets the "driveControl" field.
func (msu *MachineSpecificationUpdate) SetDriveControl(s string) *MachineSpecificationUpdate {
	msu.mutation.SetDriveControl(s)
	return msu
}

// SetCabin sets the "cabin" field.
func (msu *MachineSpecificationUpdate) SetCabin(s string) *MachineSpecificationUpdate {
	msu.mutation.SetCabin(s)
	return msu
}

// SetLights sets the "lights" field.
func (msu *MachineSpecificationUpdate) SetLights(s string) *MachineSpecificationUpdate {
	msu.mutation.SetLights(s)
	return msu
}

// SetBattery sets the "battery" field.
func (msu *MachineSpecificationUpdate) SetBattery(s string) *MachineSpecificationUpdate {
	msu.mutation.SetBattery(s)
	return msu
}

// SetNillableBattery sets the "battery" field if the given value is not nil.
func (msu *MachineSpecificationUpdate) SetNillableBattery(s *string) *MachineSpecificationUpdate {
	if s != nil {
		msu.SetBattery(*s)
	}
	return msu
}

// ClearBattery clears the value of the "battery" field.
func (msu *MachineSpecificationUpdate) ClearBattery() *MachineSpecificationUpdate {
	msu.mutation.ClearBattery()
	return msu
}

// SetMachineID sets the "machine" edge to the Machine entity by ID.
func (msu *MachineSpecificationUpdate) SetMachineID(id int) *MachineSpecificationUpdate {
	msu.mutation.SetMachineID(id)
	return msu
}

// SetNillableMachineID sets the "machine" edge to the Machine entity by ID if the given value is not nil.
func (msu *MachineSpecificationUpdate) SetNillableMachineID(id *int) *MachineSpecificationUpdate {
	if id != nil {
		msu = msu.SetMachineID(*id)
	}
	return msu
}

// SetMachine sets the "machine" edge to the Machine entity.
func (msu *MachineSpecificationUpdate) SetMachine(m *Machine) *MachineSpecificationUpdate {
	return msu.SetMachineID(m.ID)
}

// Mutation returns the MachineSpecificationMutation object of the builder.
func (msu *MachineSpecificationUpdate) Mutation() *MachineSpecificationMutation {
	return msu.mutation
}

// ClearMachine clears the "machine" edge to the Machine entity.
func (msu *MachineSpecificationUpdate) ClearMachine() *MachineSpecificationUpdate {
	msu.mutation.ClearMachine()
	return msu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MachineSpecificationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(msu.hooks) == 0 {
		affected, err = msu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MachineSpecificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msu.mutation = mutation
			affected, err = msu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(msu.hooks) - 1; i >= 0; i-- {
			if msu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MachineSpecificationUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MachineSpecificationUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MachineSpecificationUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msu *MachineSpecificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   machinespecification.Table,
			Columns: machinespecification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: machinespecification.FieldID,
			},
		},
	}
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.MachineNumber(); ok {
		_spec.SetField(machinespecification.FieldMachineNumber, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedMachineNumber(); ok {
		_spec.AddField(machinespecification.FieldMachineNumber, field.TypeInt, value)
	}
	if value, ok := msu.mutation.MachineType(); ok {
		_spec.SetField(machinespecification.FieldMachineType, field.TypeString, value)
	}
	if value, ok := msu.mutation.Drive(); ok {
		_spec.SetField(machinespecification.FieldDrive, field.TypeString, value)
	}
	if value, ok := msu.mutation.LoadCapacity(); ok {
		_spec.SetField(machinespecification.FieldLoadCapacity, field.TypeUint, value)
	}
	if value, ok := msu.mutation.AddedLoadCapacity(); ok {
		_spec.AddField(machinespecification.FieldLoadCapacity, field.TypeUint, value)
	}
	if value, ok := msu.mutation.Year(); ok {
		_spec.SetField(machinespecification.FieldYear, field.TypeUint, value)
	}
	if value, ok := msu.mutation.AddedYear(); ok {
		_spec.AddField(machinespecification.FieldYear, field.TypeUint, value)
	}
	if value, ok := msu.mutation.MotorHours(); ok {
		_spec.SetField(machinespecification.FieldMotorHours, field.TypeUint, value)
	}
	if value, ok := msu.mutation.AddedMotorHours(); ok {
		_spec.AddField(machinespecification.FieldMotorHours, field.TypeUint, value)
	}
	if value, ok := msu.mutation.PassingHeight(); ok {
		_spec.SetField(machinespecification.FieldPassingHeight, field.TypeUint, value)
	}
	if value, ok := msu.mutation.AddedPassingHeight(); ok {
		_spec.AddField(machinespecification.FieldPassingHeight, field.TypeUint, value)
	}
	if msu.mutation.PassingHeightCleared() {
		_spec.ClearField(machinespecification.FieldPassingHeight, field.TypeUint)
	}
	if value, ok := msu.mutation.LiftHeight(); ok {
		_spec.SetField(machinespecification.FieldLiftHeight, field.TypeUint, value)
	}
	if value, ok := msu.mutation.AddedLiftHeight(); ok {
		_spec.AddField(machinespecification.FieldLiftHeight, field.TypeUint, value)
	}
	if value, ok := msu.mutation.Weight(); ok {
		_spec.SetField(machinespecification.FieldWeight, field.TypeUint, value)
	}
	if value, ok := msu.mutation.AddedWeight(); ok {
		_spec.AddField(machinespecification.FieldWeight, field.TypeUint, value)
	}
	if value, ok := msu.mutation.Forks(); ok {
		_spec.SetField(machinespecification.FieldForks, field.TypeString, value)
	}
	if value, ok := msu.mutation.MastType(); ok {
		_spec.SetField(machinespecification.FieldMastType, field.TypeString, value)
	}
	if msu.mutation.MastTypeCleared() {
		_spec.ClearField(machinespecification.FieldMastType, field.TypeString)
	}
	if value, ok := msu.mutation.AdditionalAttributes(); ok {
		_spec.SetField(machinespecification.FieldAdditionalAttributes, field.TypeString, value)
	}
	if msu.mutation.AdditionalAttributesCleared() {
		_spec.ClearField(machinespecification.FieldAdditionalAttributes, field.TypeString)
	}
	if value, ok := msu.mutation.Equipment(); ok {
		_spec.SetField(machinespecification.FieldEquipment, field.TypeString, value)
	}
	if msu.mutation.EquipmentCleared() {
		_spec.ClearField(machinespecification.FieldEquipment, field.TypeString)
	}
	if value, ok := msu.mutation.Engine(); ok {
		_spec.SetField(machinespecification.FieldEngine, field.TypeString, value)
	}
	if value, ok := msu.mutation.HydraulicControl(); ok {
		_spec.SetField(machinespecification.FieldHydraulicControl, field.TypeString, value)
	}
	if value, ok := msu.mutation.DriveControl(); ok {
		_spec.SetField(machinespecification.FieldDriveControl, field.TypeString, value)
	}
	if value, ok := msu.mutation.Cabin(); ok {
		_spec.SetField(machinespecification.FieldCabin, field.TypeString, value)
	}
	if value, ok := msu.mutation.Lights(); ok {
		_spec.SetField(machinespecification.FieldLights, field.TypeString, value)
	}
	if value, ok := msu.mutation.Battery(); ok {
		_spec.SetField(machinespecification.FieldBattery, field.TypeString, value)
	}
	if msu.mutation.BatteryCleared() {
		_spec.ClearField(machinespecification.FieldBattery, field.TypeString)
	}
	if msu.mutation.MachineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   machinespecification.MachineTable,
			Columns: []string{machinespecification.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.MachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   machinespecification.MachineTable,
			Columns: []string{machinespecification.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{machinespecification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MachineSpecificationUpdateOne is the builder for updating a single MachineSpecification entity.
type MachineSpecificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MachineSpecificationMutation
}

// SetMachineNumber sets the "machineNumber" field.
func (msuo *MachineSpecificationUpdateOne) SetMachineNumber(i int) *MachineSpecificationUpdateOne {
	msuo.mutation.ResetMachineNumber()
	msuo.mutation.SetMachineNumber(i)
	return msuo
}

// AddMachineNumber adds i to the "machineNumber" field.
func (msuo *MachineSpecificationUpdateOne) AddMachineNumber(i int) *MachineSpecificationUpdateOne {
	msuo.mutation.AddMachineNumber(i)
	return msuo
}

// SetMachineType sets the "machineType" field.
func (msuo *MachineSpecificationUpdateOne) SetMachineType(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetMachineType(s)
	return msuo
}

// SetDrive sets the "drive" field.
func (msuo *MachineSpecificationUpdateOne) SetDrive(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetDrive(s)
	return msuo
}

// SetLoadCapacity sets the "loadCapacity" field.
func (msuo *MachineSpecificationUpdateOne) SetLoadCapacity(u uint) *MachineSpecificationUpdateOne {
	msuo.mutation.ResetLoadCapacity()
	msuo.mutation.SetLoadCapacity(u)
	return msuo
}

// AddLoadCapacity adds u to the "loadCapacity" field.
func (msuo *MachineSpecificationUpdateOne) AddLoadCapacity(u int) *MachineSpecificationUpdateOne {
	msuo.mutation.AddLoadCapacity(u)
	return msuo
}

// SetYear sets the "year" field.
func (msuo *MachineSpecificationUpdateOne) SetYear(u uint) *MachineSpecificationUpdateOne {
	msuo.mutation.ResetYear()
	msuo.mutation.SetYear(u)
	return msuo
}

// AddYear adds u to the "year" field.
func (msuo *MachineSpecificationUpdateOne) AddYear(u int) *MachineSpecificationUpdateOne {
	msuo.mutation.AddYear(u)
	return msuo
}

// SetMotorHours sets the "motorHours" field.
func (msuo *MachineSpecificationUpdateOne) SetMotorHours(u uint) *MachineSpecificationUpdateOne {
	msuo.mutation.ResetMotorHours()
	msuo.mutation.SetMotorHours(u)
	return msuo
}

// AddMotorHours adds u to the "motorHours" field.
func (msuo *MachineSpecificationUpdateOne) AddMotorHours(u int) *MachineSpecificationUpdateOne {
	msuo.mutation.AddMotorHours(u)
	return msuo
}

// SetPassingHeight sets the "passingHeight" field.
func (msuo *MachineSpecificationUpdateOne) SetPassingHeight(u uint) *MachineSpecificationUpdateOne {
	msuo.mutation.ResetPassingHeight()
	msuo.mutation.SetPassingHeight(u)
	return msuo
}

// SetNillablePassingHeight sets the "passingHeight" field if the given value is not nil.
func (msuo *MachineSpecificationUpdateOne) SetNillablePassingHeight(u *uint) *MachineSpecificationUpdateOne {
	if u != nil {
		msuo.SetPassingHeight(*u)
	}
	return msuo
}

// AddPassingHeight adds u to the "passingHeight" field.
func (msuo *MachineSpecificationUpdateOne) AddPassingHeight(u int) *MachineSpecificationUpdateOne {
	msuo.mutation.AddPassingHeight(u)
	return msuo
}

// ClearPassingHeight clears the value of the "passingHeight" field.
func (msuo *MachineSpecificationUpdateOne) ClearPassingHeight() *MachineSpecificationUpdateOne {
	msuo.mutation.ClearPassingHeight()
	return msuo
}

// SetLiftHeight sets the "liftHeight" field.
func (msuo *MachineSpecificationUpdateOne) SetLiftHeight(u uint) *MachineSpecificationUpdateOne {
	msuo.mutation.ResetLiftHeight()
	msuo.mutation.SetLiftHeight(u)
	return msuo
}

// AddLiftHeight adds u to the "liftHeight" field.
func (msuo *MachineSpecificationUpdateOne) AddLiftHeight(u int) *MachineSpecificationUpdateOne {
	msuo.mutation.AddLiftHeight(u)
	return msuo
}

// SetWeight sets the "weight" field.
func (msuo *MachineSpecificationUpdateOne) SetWeight(u uint) *MachineSpecificationUpdateOne {
	msuo.mutation.ResetWeight()
	msuo.mutation.SetWeight(u)
	return msuo
}

// AddWeight adds u to the "weight" field.
func (msuo *MachineSpecificationUpdateOne) AddWeight(u int) *MachineSpecificationUpdateOne {
	msuo.mutation.AddWeight(u)
	return msuo
}

// SetForks sets the "forks" field.
func (msuo *MachineSpecificationUpdateOne) SetForks(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetForks(s)
	return msuo
}

// SetMastType sets the "mastType" field.
func (msuo *MachineSpecificationUpdateOne) SetMastType(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetMastType(s)
	return msuo
}

// SetNillableMastType sets the "mastType" field if the given value is not nil.
func (msuo *MachineSpecificationUpdateOne) SetNillableMastType(s *string) *MachineSpecificationUpdateOne {
	if s != nil {
		msuo.SetMastType(*s)
	}
	return msuo
}

// ClearMastType clears the value of the "mastType" field.
func (msuo *MachineSpecificationUpdateOne) ClearMastType() *MachineSpecificationUpdateOne {
	msuo.mutation.ClearMastType()
	return msuo
}

// SetAdditionalAttributes sets the "additionalAttributes" field.
func (msuo *MachineSpecificationUpdateOne) SetAdditionalAttributes(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetAdditionalAttributes(s)
	return msuo
}

// SetNillableAdditionalAttributes sets the "additionalAttributes" field if the given value is not nil.
func (msuo *MachineSpecificationUpdateOne) SetNillableAdditionalAttributes(s *string) *MachineSpecificationUpdateOne {
	if s != nil {
		msuo.SetAdditionalAttributes(*s)
	}
	return msuo
}

// ClearAdditionalAttributes clears the value of the "additionalAttributes" field.
func (msuo *MachineSpecificationUpdateOne) ClearAdditionalAttributes() *MachineSpecificationUpdateOne {
	msuo.mutation.ClearAdditionalAttributes()
	return msuo
}

// SetEquipment sets the "equipment" field.
func (msuo *MachineSpecificationUpdateOne) SetEquipment(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetEquipment(s)
	return msuo
}

// SetNillableEquipment sets the "equipment" field if the given value is not nil.
func (msuo *MachineSpecificationUpdateOne) SetNillableEquipment(s *string) *MachineSpecificationUpdateOne {
	if s != nil {
		msuo.SetEquipment(*s)
	}
	return msuo
}

// ClearEquipment clears the value of the "equipment" field.
func (msuo *MachineSpecificationUpdateOne) ClearEquipment() *MachineSpecificationUpdateOne {
	msuo.mutation.ClearEquipment()
	return msuo
}

// SetEngine sets the "engine" field.
func (msuo *MachineSpecificationUpdateOne) SetEngine(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetEngine(s)
	return msuo
}

// SetHydraulicControl sets the "hydraulicControl" field.
func (msuo *MachineSpecificationUpdateOne) SetHydraulicControl(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetHydraulicControl(s)
	return msuo
}

// SetDriveControl sets the "driveControl" field.
func (msuo *MachineSpecificationUpdateOne) SetDriveControl(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetDriveControl(s)
	return msuo
}

// SetCabin sets the "cabin" field.
func (msuo *MachineSpecificationUpdateOne) SetCabin(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetCabin(s)
	return msuo
}

// SetLights sets the "lights" field.
func (msuo *MachineSpecificationUpdateOne) SetLights(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetLights(s)
	return msuo
}

// SetBattery sets the "battery" field.
func (msuo *MachineSpecificationUpdateOne) SetBattery(s string) *MachineSpecificationUpdateOne {
	msuo.mutation.SetBattery(s)
	return msuo
}

// SetNillableBattery sets the "battery" field if the given value is not nil.
func (msuo *MachineSpecificationUpdateOne) SetNillableBattery(s *string) *MachineSpecificationUpdateOne {
	if s != nil {
		msuo.SetBattery(*s)
	}
	return msuo
}

// ClearBattery clears the value of the "battery" field.
func (msuo *MachineSpecificationUpdateOne) ClearBattery() *MachineSpecificationUpdateOne {
	msuo.mutation.ClearBattery()
	return msuo
}

// SetMachineID sets the "machine" edge to the Machine entity by ID.
func (msuo *MachineSpecificationUpdateOne) SetMachineID(id int) *MachineSpecificationUpdateOne {
	msuo.mutation.SetMachineID(id)
	return msuo
}

// SetNillableMachineID sets the "machine" edge to the Machine entity by ID if the given value is not nil.
func (msuo *MachineSpecificationUpdateOne) SetNillableMachineID(id *int) *MachineSpecificationUpdateOne {
	if id != nil {
		msuo = msuo.SetMachineID(*id)
	}
	return msuo
}

// SetMachine sets the "machine" edge to the Machine entity.
func (msuo *MachineSpecificationUpdateOne) SetMachine(m *Machine) *MachineSpecificationUpdateOne {
	return msuo.SetMachineID(m.ID)
}

// Mutation returns the MachineSpecificationMutation object of the builder.
func (msuo *MachineSpecificationUpdateOne) Mutation() *MachineSpecificationMutation {
	return msuo.mutation
}

// ClearMachine clears the "machine" edge to the Machine entity.
func (msuo *MachineSpecificationUpdateOne) ClearMachine() *MachineSpecificationUpdateOne {
	msuo.mutation.ClearMachine()
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MachineSpecificationUpdateOne) Select(field string, fields ...string) *MachineSpecificationUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MachineSpecification entity.
func (msuo *MachineSpecificationUpdateOne) Save(ctx context.Context) (*MachineSpecification, error) {
	var (
		err  error
		node *MachineSpecification
	)
	if len(msuo.hooks) == 0 {
		node, err = msuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MachineSpecificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msuo.mutation = mutation
			node, err = msuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(msuo.hooks) - 1; i >= 0; i-- {
			if msuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, msuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MachineSpecification)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MachineSpecificationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MachineSpecificationUpdateOne) SaveX(ctx context.Context) *MachineSpecification {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MachineSpecificationUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MachineSpecificationUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msuo *MachineSpecificationUpdateOne) sqlSave(ctx context.Context) (_node *MachineSpecification, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   machinespecification.Table,
			Columns: machinespecification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: machinespecification.FieldID,
			},
		},
	}
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MachineSpecification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, machinespecification.FieldID)
		for _, f := range fields {
			if !machinespecification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != machinespecification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.MachineNumber(); ok {
		_spec.SetField(machinespecification.FieldMachineNumber, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedMachineNumber(); ok {
		_spec.AddField(machinespecification.FieldMachineNumber, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.MachineType(); ok {
		_spec.SetField(machinespecification.FieldMachineType, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Drive(); ok {
		_spec.SetField(machinespecification.FieldDrive, field.TypeString, value)
	}
	if value, ok := msuo.mutation.LoadCapacity(); ok {
		_spec.SetField(machinespecification.FieldLoadCapacity, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.AddedLoadCapacity(); ok {
		_spec.AddField(machinespecification.FieldLoadCapacity, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.Year(); ok {
		_spec.SetField(machinespecification.FieldYear, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.AddedYear(); ok {
		_spec.AddField(machinespecification.FieldYear, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.MotorHours(); ok {
		_spec.SetField(machinespecification.FieldMotorHours, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.AddedMotorHours(); ok {
		_spec.AddField(machinespecification.FieldMotorHours, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.PassingHeight(); ok {
		_spec.SetField(machinespecification.FieldPassingHeight, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.AddedPassingHeight(); ok {
		_spec.AddField(machinespecification.FieldPassingHeight, field.TypeUint, value)
	}
	if msuo.mutation.PassingHeightCleared() {
		_spec.ClearField(machinespecification.FieldPassingHeight, field.TypeUint)
	}
	if value, ok := msuo.mutation.LiftHeight(); ok {
		_spec.SetField(machinespecification.FieldLiftHeight, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.AddedLiftHeight(); ok {
		_spec.AddField(machinespecification.FieldLiftHeight, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.Weight(); ok {
		_spec.SetField(machinespecification.FieldWeight, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.AddedWeight(); ok {
		_spec.AddField(machinespecification.FieldWeight, field.TypeUint, value)
	}
	if value, ok := msuo.mutation.Forks(); ok {
		_spec.SetField(machinespecification.FieldForks, field.TypeString, value)
	}
	if value, ok := msuo.mutation.MastType(); ok {
		_spec.SetField(machinespecification.FieldMastType, field.TypeString, value)
	}
	if msuo.mutation.MastTypeCleared() {
		_spec.ClearField(machinespecification.FieldMastType, field.TypeString)
	}
	if value, ok := msuo.mutation.AdditionalAttributes(); ok {
		_spec.SetField(machinespecification.FieldAdditionalAttributes, field.TypeString, value)
	}
	if msuo.mutation.AdditionalAttributesCleared() {
		_spec.ClearField(machinespecification.FieldAdditionalAttributes, field.TypeString)
	}
	if value, ok := msuo.mutation.Equipment(); ok {
		_spec.SetField(machinespecification.FieldEquipment, field.TypeString, value)
	}
	if msuo.mutation.EquipmentCleared() {
		_spec.ClearField(machinespecification.FieldEquipment, field.TypeString)
	}
	if value, ok := msuo.mutation.Engine(); ok {
		_spec.SetField(machinespecification.FieldEngine, field.TypeString, value)
	}
	if value, ok := msuo.mutation.HydraulicControl(); ok {
		_spec.SetField(machinespecification.FieldHydraulicControl, field.TypeString, value)
	}
	if value, ok := msuo.mutation.DriveControl(); ok {
		_spec.SetField(machinespecification.FieldDriveControl, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Cabin(); ok {
		_spec.SetField(machinespecification.FieldCabin, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Lights(); ok {
		_spec.SetField(machinespecification.FieldLights, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Battery(); ok {
		_spec.SetField(machinespecification.FieldBattery, field.TypeString, value)
	}
	if msuo.mutation.BatteryCleared() {
		_spec.ClearField(machinespecification.FieldBattery, field.TypeString)
	}
	if msuo.mutation.MachineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   machinespecification.MachineTable,
			Columns: []string{machinespecification.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.MachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   machinespecification.MachineTable,
			Columns: []string{machinespecification.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MachineSpecification{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{machinespecification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
