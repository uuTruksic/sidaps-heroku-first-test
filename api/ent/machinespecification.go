// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/machine"
	"api/ent/machinespecification"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// MachineSpecification is the model entity for the MachineSpecification schema.
type MachineSpecification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MachineNumber holds the value of the "machineNumber" field.
	MachineNumber int `json:"machineNumber,omitempty"`
	// MachineType holds the value of the "machineType" field.
	MachineType string `json:"machineType,omitempty"`
	// Drive holds the value of the "drive" field.
	Drive string `json:"drive,omitempty"`
	// LoadCapacity holds the value of the "loadCapacity" field.
	LoadCapacity uint `json:"loadCapacity,omitempty"`
	// Year holds the value of the "year" field.
	Year uint `json:"year,omitempty"`
	// MotorHours holds the value of the "motorHours" field.
	MotorHours uint `json:"motorHours,omitempty"`
	// PassingHeight holds the value of the "passingHeight" field.
	PassingHeight uint `json:"passingHeight,omitempty"`
	// LiftHeight holds the value of the "liftHeight" field.
	LiftHeight uint `json:"liftHeight,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight uint `json:"weight,omitempty"`
	// Forks holds the value of the "forks" field.
	Forks string `json:"forks,omitempty"`
	// MastType holds the value of the "mastType" field.
	MastType string `json:"mastType,omitempty"`
	// AdditionalAttributes holds the value of the "additionalAttributes" field.
	AdditionalAttributes string `json:"additionalAttributes,omitempty"`
	// Equipment holds the value of the "equipment" field.
	Equipment string `json:"equipment,omitempty"`
	// Engine holds the value of the "engine" field.
	Engine string `json:"engine,omitempty"`
	// HydraulicControl holds the value of the "hydraulicControl" field.
	HydraulicControl string `json:"hydraulicControl,omitempty"`
	// DriveControl holds the value of the "driveControl" field.
	DriveControl string `json:"driveControl,omitempty"`
	// Cabin holds the value of the "cabin" field.
	Cabin string `json:"cabin,omitempty"`
	// Lights holds the value of the "lights" field.
	Lights string `json:"lights,omitempty"`
	// Battery holds the value of the "battery" field.
	Battery string `json:"battery,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MachineSpecificationQuery when eager-loading is set.
	Edges                         MachineSpecificationEdges `json:"edges"`
	machine_machine_specification *int
}

// MachineSpecificationEdges holds the relations/edges for other nodes in the graph.
type MachineSpecificationEdges struct {
	// Machine holds the value of the machine edge.
	Machine *Machine `json:"machine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MachineOrErr returns the Machine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MachineSpecificationEdges) MachineOrErr() (*Machine, error) {
	if e.loadedTypes[0] {
		if e.Machine == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: machine.Label}
		}
		return e.Machine, nil
	}
	return nil, &NotLoadedError{edge: "machine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MachineSpecification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case machinespecification.FieldID, machinespecification.FieldMachineNumber, machinespecification.FieldLoadCapacity, machinespecification.FieldYear, machinespecification.FieldMotorHours, machinespecification.FieldPassingHeight, machinespecification.FieldLiftHeight, machinespecification.FieldWeight:
			values[i] = new(sql.NullInt64)
		case machinespecification.FieldMachineType, machinespecification.FieldDrive, machinespecification.FieldForks, machinespecification.FieldMastType, machinespecification.FieldAdditionalAttributes, machinespecification.FieldEquipment, machinespecification.FieldEngine, machinespecification.FieldHydraulicControl, machinespecification.FieldDriveControl, machinespecification.FieldCabin, machinespecification.FieldLights, machinespecification.FieldBattery:
			values[i] = new(sql.NullString)
		case machinespecification.ForeignKeys[0]: // machine_machine_specification
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MachineSpecification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MachineSpecification fields.
func (ms *MachineSpecification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case machinespecification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case machinespecification.FieldMachineNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field machineNumber", values[i])
			} else if value.Valid {
				ms.MachineNumber = int(value.Int64)
			}
		case machinespecification.FieldMachineType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field machineType", values[i])
			} else if value.Valid {
				ms.MachineType = value.String
			}
		case machinespecification.FieldDrive:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field drive", values[i])
			} else if value.Valid {
				ms.Drive = value.String
			}
		case machinespecification.FieldLoadCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field loadCapacity", values[i])
			} else if value.Valid {
				ms.LoadCapacity = uint(value.Int64)
			}
		case machinespecification.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				ms.Year = uint(value.Int64)
			}
		case machinespecification.FieldMotorHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field motorHours", values[i])
			} else if value.Valid {
				ms.MotorHours = uint(value.Int64)
			}
		case machinespecification.FieldPassingHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passingHeight", values[i])
			} else if value.Valid {
				ms.PassingHeight = uint(value.Int64)
			}
		case machinespecification.FieldLiftHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field liftHeight", values[i])
			} else if value.Valid {
				ms.LiftHeight = uint(value.Int64)
			}
		case machinespecification.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				ms.Weight = uint(value.Int64)
			}
		case machinespecification.FieldForks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forks", values[i])
			} else if value.Valid {
				ms.Forks = value.String
			}
		case machinespecification.FieldMastType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mastType", values[i])
			} else if value.Valid {
				ms.MastType = value.String
			}
		case machinespecification.FieldAdditionalAttributes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field additionalAttributes", values[i])
			} else if value.Valid {
				ms.AdditionalAttributes = value.String
			}
		case machinespecification.FieldEquipment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equipment", values[i])
			} else if value.Valid {
				ms.Equipment = value.String
			}
		case machinespecification.FieldEngine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine", values[i])
			} else if value.Valid {
				ms.Engine = value.String
			}
		case machinespecification.FieldHydraulicControl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hydraulicControl", values[i])
			} else if value.Valid {
				ms.HydraulicControl = value.String
			}
		case machinespecification.FieldDriveControl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field driveControl", values[i])
			} else if value.Valid {
				ms.DriveControl = value.String
			}
		case machinespecification.FieldCabin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cabin", values[i])
			} else if value.Valid {
				ms.Cabin = value.String
			}
		case machinespecification.FieldLights:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lights", values[i])
			} else if value.Valid {
				ms.Lights = value.String
			}
		case machinespecification.FieldBattery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field battery", values[i])
			} else if value.Valid {
				ms.Battery = value.String
			}
		case machinespecification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field machine_machine_specification", value)
			} else if value.Valid {
				ms.machine_machine_specification = new(int)
				*ms.machine_machine_specification = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMachine queries the "machine" edge of the MachineSpecification entity.
func (ms *MachineSpecification) QueryMachine() *MachineQuery {
	return (&MachineSpecificationClient{config: ms.config}).QueryMachine(ms)
}

// Update returns a builder for updating this MachineSpecification.
// Note that you need to call MachineSpecification.Unwrap() before calling this method if this MachineSpecification
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MachineSpecification) Update() *MachineSpecificationUpdateOne {
	return (&MachineSpecificationClient{config: ms.config}).UpdateOne(ms)
}

// Unwrap unwraps the MachineSpecification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MachineSpecification) Unwrap() *MachineSpecification {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MachineSpecification is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MachineSpecification) String() string {
	var builder strings.Builder
	builder.WriteString("MachineSpecification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("machineNumber=")
	builder.WriteString(fmt.Sprintf("%v", ms.MachineNumber))
	builder.WriteString(", ")
	builder.WriteString("machineType=")
	builder.WriteString(ms.MachineType)
	builder.WriteString(", ")
	builder.WriteString("drive=")
	builder.WriteString(ms.Drive)
	builder.WriteString(", ")
	builder.WriteString("loadCapacity=")
	builder.WriteString(fmt.Sprintf("%v", ms.LoadCapacity))
	builder.WriteString(", ")
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", ms.Year))
	builder.WriteString(", ")
	builder.WriteString("motorHours=")
	builder.WriteString(fmt.Sprintf("%v", ms.MotorHours))
	builder.WriteString(", ")
	builder.WriteString("passingHeight=")
	builder.WriteString(fmt.Sprintf("%v", ms.PassingHeight))
	builder.WriteString(", ")
	builder.WriteString("liftHeight=")
	builder.WriteString(fmt.Sprintf("%v", ms.LiftHeight))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", ms.Weight))
	builder.WriteString(", ")
	builder.WriteString("forks=")
	builder.WriteString(ms.Forks)
	builder.WriteString(", ")
	builder.WriteString("mastType=")
	builder.WriteString(ms.MastType)
	builder.WriteString(", ")
	builder.WriteString("additionalAttributes=")
	builder.WriteString(ms.AdditionalAttributes)
	builder.WriteString(", ")
	builder.WriteString("equipment=")
	builder.WriteString(ms.Equipment)
	builder.WriteString(", ")
	builder.WriteString("engine=")
	builder.WriteString(ms.Engine)
	builder.WriteString(", ")
	builder.WriteString("hydraulicControl=")
	builder.WriteString(ms.HydraulicControl)
	builder.WriteString(", ")
	builder.WriteString("driveControl=")
	builder.WriteString(ms.DriveControl)
	builder.WriteString(", ")
	builder.WriteString("cabin=")
	builder.WriteString(ms.Cabin)
	builder.WriteString(", ")
	builder.WriteString("lights=")
	builder.WriteString(ms.Lights)
	builder.WriteString(", ")
	builder.WriteString("battery=")
	builder.WriteString(ms.Battery)
	builder.WriteByte(')')
	return builder.String()
}

// MachineSpecifications is a parsable slice of MachineSpecification.
type MachineSpecifications []*MachineSpecification

func (ms MachineSpecifications) config(cfg config) {
	for _i := range ms {
		ms[_i].config = cfg
	}
}
