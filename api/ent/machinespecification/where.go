// Code generated by ent, DO NOT EDIT.

package machinespecification

import (
	"api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MachineNumber applies equality check predicate on the "machineNumber" field. It's identical to MachineNumberEQ.
func MachineNumber(v int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachineNumber), v))
	})
}

// MachineType applies equality check predicate on the "machineType" field. It's identical to MachineTypeEQ.
func MachineType(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachineType), v))
	})
}

// Drive applies equality check predicate on the "drive" field. It's identical to DriveEQ.
func Drive(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrive), v))
	})
}

// LoadCapacity applies equality check predicate on the "loadCapacity" field. It's identical to LoadCapacityEQ.
func LoadCapacity(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadCapacity), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// MotorHours applies equality check predicate on the "motorHours" field. It's identical to MotorHoursEQ.
func MotorHours(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMotorHours), v))
	})
}

// PassingHeight applies equality check predicate on the "passingHeight" field. It's identical to PassingHeightEQ.
func PassingHeight(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassingHeight), v))
	})
}

// LiftHeight applies equality check predicate on the "liftHeight" field. It's identical to LiftHeightEQ.
func LiftHeight(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiftHeight), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// Forks applies equality check predicate on the "forks" field. It's identical to ForksEQ.
func Forks(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForks), v))
	})
}

// MastType applies equality check predicate on the "mastType" field. It's identical to MastTypeEQ.
func MastType(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMastType), v))
	})
}

// AdditionalAttributes applies equality check predicate on the "additionalAttributes" field. It's identical to AdditionalAttributesEQ.
func AdditionalAttributes(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditionalAttributes), v))
	})
}

// Equipment applies equality check predicate on the "equipment" field. It's identical to EquipmentEQ.
func Equipment(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipment), v))
	})
}

// Engine applies equality check predicate on the "engine" field. It's identical to EngineEQ.
func Engine(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngine), v))
	})
}

// HydraulicControl applies equality check predicate on the "hydraulicControl" field. It's identical to HydraulicControlEQ.
func HydraulicControl(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydraulicControl), v))
	})
}

// DriveControl applies equality check predicate on the "driveControl" field. It's identical to DriveControlEQ.
func DriveControl(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDriveControl), v))
	})
}

// Cabin applies equality check predicate on the "cabin" field. It's identical to CabinEQ.
func Cabin(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabin), v))
	})
}

// Lights applies equality check predicate on the "lights" field. It's identical to LightsEQ.
func Lights(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLights), v))
	})
}

// Battery applies equality check predicate on the "battery" field. It's identical to BatteryEQ.
func Battery(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattery), v))
	})
}

// MachineNumberEQ applies the EQ predicate on the "machineNumber" field.
func MachineNumberEQ(v int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachineNumber), v))
	})
}

// MachineNumberNEQ applies the NEQ predicate on the "machineNumber" field.
func MachineNumberNEQ(v int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMachineNumber), v))
	})
}

// MachineNumberIn applies the In predicate on the "machineNumber" field.
func MachineNumberIn(vs ...int) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMachineNumber), v...))
	})
}

// MachineNumberNotIn applies the NotIn predicate on the "machineNumber" field.
func MachineNumberNotIn(vs ...int) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMachineNumber), v...))
	})
}

// MachineNumberGT applies the GT predicate on the "machineNumber" field.
func MachineNumberGT(v int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMachineNumber), v))
	})
}

// MachineNumberGTE applies the GTE predicate on the "machineNumber" field.
func MachineNumberGTE(v int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMachineNumber), v))
	})
}

// MachineNumberLT applies the LT predicate on the "machineNumber" field.
func MachineNumberLT(v int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMachineNumber), v))
	})
}

// MachineNumberLTE applies the LTE predicate on the "machineNumber" field.
func MachineNumberLTE(v int) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMachineNumber), v))
	})
}

// MachineTypeEQ applies the EQ predicate on the "machineType" field.
func MachineTypeEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachineType), v))
	})
}

// MachineTypeNEQ applies the NEQ predicate on the "machineType" field.
func MachineTypeNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMachineType), v))
	})
}

// MachineTypeIn applies the In predicate on the "machineType" field.
func MachineTypeIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMachineType), v...))
	})
}

// MachineTypeNotIn applies the NotIn predicate on the "machineType" field.
func MachineTypeNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMachineType), v...))
	})
}

// MachineTypeGT applies the GT predicate on the "machineType" field.
func MachineTypeGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMachineType), v))
	})
}

// MachineTypeGTE applies the GTE predicate on the "machineType" field.
func MachineTypeGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMachineType), v))
	})
}

// MachineTypeLT applies the LT predicate on the "machineType" field.
func MachineTypeLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMachineType), v))
	})
}

// MachineTypeLTE applies the LTE predicate on the "machineType" field.
func MachineTypeLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMachineType), v))
	})
}

// MachineTypeContains applies the Contains predicate on the "machineType" field.
func MachineTypeContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMachineType), v))
	})
}

// MachineTypeHasPrefix applies the HasPrefix predicate on the "machineType" field.
func MachineTypeHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMachineType), v))
	})
}

// MachineTypeHasSuffix applies the HasSuffix predicate on the "machineType" field.
func MachineTypeHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMachineType), v))
	})
}

// MachineTypeEqualFold applies the EqualFold predicate on the "machineType" field.
func MachineTypeEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMachineType), v))
	})
}

// MachineTypeContainsFold applies the ContainsFold predicate on the "machineType" field.
func MachineTypeContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMachineType), v))
	})
}

// DriveEQ applies the EQ predicate on the "drive" field.
func DriveEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrive), v))
	})
}

// DriveNEQ applies the NEQ predicate on the "drive" field.
func DriveNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDrive), v))
	})
}

// DriveIn applies the In predicate on the "drive" field.
func DriveIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDrive), v...))
	})
}

// DriveNotIn applies the NotIn predicate on the "drive" field.
func DriveNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDrive), v...))
	})
}

// DriveGT applies the GT predicate on the "drive" field.
func DriveGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDrive), v))
	})
}

// DriveGTE applies the GTE predicate on the "drive" field.
func DriveGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDrive), v))
	})
}

// DriveLT applies the LT predicate on the "drive" field.
func DriveLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDrive), v))
	})
}

// DriveLTE applies the LTE predicate on the "drive" field.
func DriveLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDrive), v))
	})
}

// DriveContains applies the Contains predicate on the "drive" field.
func DriveContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDrive), v))
	})
}

// DriveHasPrefix applies the HasPrefix predicate on the "drive" field.
func DriveHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDrive), v))
	})
}

// DriveHasSuffix applies the HasSuffix predicate on the "drive" field.
func DriveHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDrive), v))
	})
}

// DriveEqualFold applies the EqualFold predicate on the "drive" field.
func DriveEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDrive), v))
	})
}

// DriveContainsFold applies the ContainsFold predicate on the "drive" field.
func DriveContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDrive), v))
	})
}

// LoadCapacityEQ applies the EQ predicate on the "loadCapacity" field.
func LoadCapacityEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityNEQ applies the NEQ predicate on the "loadCapacity" field.
func LoadCapacityNEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityIn applies the In predicate on the "loadCapacity" field.
func LoadCapacityIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLoadCapacity), v...))
	})
}

// LoadCapacityNotIn applies the NotIn predicate on the "loadCapacity" field.
func LoadCapacityNotIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLoadCapacity), v...))
	})
}

// LoadCapacityGT applies the GT predicate on the "loadCapacity" field.
func LoadCapacityGT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityGTE applies the GTE predicate on the "loadCapacity" field.
func LoadCapacityGTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityLT applies the LT predicate on the "loadCapacity" field.
func LoadCapacityLT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoadCapacity), v))
	})
}

// LoadCapacityLTE applies the LTE predicate on the "loadCapacity" field.
func LoadCapacityLTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoadCapacity), v))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// MotorHoursEQ applies the EQ predicate on the "motorHours" field.
func MotorHoursEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMotorHours), v))
	})
}

// MotorHoursNEQ applies the NEQ predicate on the "motorHours" field.
func MotorHoursNEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMotorHours), v))
	})
}

// MotorHoursIn applies the In predicate on the "motorHours" field.
func MotorHoursIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMotorHours), v...))
	})
}

// MotorHoursNotIn applies the NotIn predicate on the "motorHours" field.
func MotorHoursNotIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMotorHours), v...))
	})
}

// MotorHoursGT applies the GT predicate on the "motorHours" field.
func MotorHoursGT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMotorHours), v))
	})
}

// MotorHoursGTE applies the GTE predicate on the "motorHours" field.
func MotorHoursGTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMotorHours), v))
	})
}

// MotorHoursLT applies the LT predicate on the "motorHours" field.
func MotorHoursLT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMotorHours), v))
	})
}

// MotorHoursLTE applies the LTE predicate on the "motorHours" field.
func MotorHoursLTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMotorHours), v))
	})
}

// PassingHeightEQ applies the EQ predicate on the "passingHeight" field.
func PassingHeightEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassingHeight), v))
	})
}

// PassingHeightNEQ applies the NEQ predicate on the "passingHeight" field.
func PassingHeightNEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassingHeight), v))
	})
}

// PassingHeightIn applies the In predicate on the "passingHeight" field.
func PassingHeightIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassingHeight), v...))
	})
}

// PassingHeightNotIn applies the NotIn predicate on the "passingHeight" field.
func PassingHeightNotIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassingHeight), v...))
	})
}

// PassingHeightGT applies the GT predicate on the "passingHeight" field.
func PassingHeightGT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassingHeight), v))
	})
}

// PassingHeightGTE applies the GTE predicate on the "passingHeight" field.
func PassingHeightGTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassingHeight), v))
	})
}

// PassingHeightLT applies the LT predicate on the "passingHeight" field.
func PassingHeightLT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassingHeight), v))
	})
}

// PassingHeightLTE applies the LTE predicate on the "passingHeight" field.
func PassingHeightLTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassingHeight), v))
	})
}

// PassingHeightIsNil applies the IsNil predicate on the "passingHeight" field.
func PassingHeightIsNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassingHeight)))
	})
}

// PassingHeightNotNil applies the NotNil predicate on the "passingHeight" field.
func PassingHeightNotNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassingHeight)))
	})
}

// LiftHeightEQ applies the EQ predicate on the "liftHeight" field.
func LiftHeightEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightNEQ applies the NEQ predicate on the "liftHeight" field.
func LiftHeightNEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightIn applies the In predicate on the "liftHeight" field.
func LiftHeightIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLiftHeight), v...))
	})
}

// LiftHeightNotIn applies the NotIn predicate on the "liftHeight" field.
func LiftHeightNotIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLiftHeight), v...))
	})
}

// LiftHeightGT applies the GT predicate on the "liftHeight" field.
func LiftHeightGT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightGTE applies the GTE predicate on the "liftHeight" field.
func LiftHeightGTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightLT applies the LT predicate on the "liftHeight" field.
func LiftHeightLT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiftHeight), v))
	})
}

// LiftHeightLTE applies the LTE predicate on the "liftHeight" field.
func LiftHeightLTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiftHeight), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...uint) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v uint) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// ForksEQ applies the EQ predicate on the "forks" field.
func ForksEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForks), v))
	})
}

// ForksNEQ applies the NEQ predicate on the "forks" field.
func ForksNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForks), v))
	})
}

// ForksIn applies the In predicate on the "forks" field.
func ForksIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldForks), v...))
	})
}

// ForksNotIn applies the NotIn predicate on the "forks" field.
func ForksNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldForks), v...))
	})
}

// ForksGT applies the GT predicate on the "forks" field.
func ForksGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldForks), v))
	})
}

// ForksGTE applies the GTE predicate on the "forks" field.
func ForksGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldForks), v))
	})
}

// ForksLT applies the LT predicate on the "forks" field.
func ForksLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldForks), v))
	})
}

// ForksLTE applies the LTE predicate on the "forks" field.
func ForksLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldForks), v))
	})
}

// ForksContains applies the Contains predicate on the "forks" field.
func ForksContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldForks), v))
	})
}

// ForksHasPrefix applies the HasPrefix predicate on the "forks" field.
func ForksHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldForks), v))
	})
}

// ForksHasSuffix applies the HasSuffix predicate on the "forks" field.
func ForksHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldForks), v))
	})
}

// ForksEqualFold applies the EqualFold predicate on the "forks" field.
func ForksEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldForks), v))
	})
}

// ForksContainsFold applies the ContainsFold predicate on the "forks" field.
func ForksContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldForks), v))
	})
}

// MastTypeEQ applies the EQ predicate on the "mastType" field.
func MastTypeEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMastType), v))
	})
}

// MastTypeNEQ applies the NEQ predicate on the "mastType" field.
func MastTypeNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMastType), v))
	})
}

// MastTypeIn applies the In predicate on the "mastType" field.
func MastTypeIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMastType), v...))
	})
}

// MastTypeNotIn applies the NotIn predicate on the "mastType" field.
func MastTypeNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMastType), v...))
	})
}

// MastTypeGT applies the GT predicate on the "mastType" field.
func MastTypeGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMastType), v))
	})
}

// MastTypeGTE applies the GTE predicate on the "mastType" field.
func MastTypeGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMastType), v))
	})
}

// MastTypeLT applies the LT predicate on the "mastType" field.
func MastTypeLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMastType), v))
	})
}

// MastTypeLTE applies the LTE predicate on the "mastType" field.
func MastTypeLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMastType), v))
	})
}

// MastTypeContains applies the Contains predicate on the "mastType" field.
func MastTypeContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMastType), v))
	})
}

// MastTypeHasPrefix applies the HasPrefix predicate on the "mastType" field.
func MastTypeHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMastType), v))
	})
}

// MastTypeHasSuffix applies the HasSuffix predicate on the "mastType" field.
func MastTypeHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMastType), v))
	})
}

// MastTypeIsNil applies the IsNil predicate on the "mastType" field.
func MastTypeIsNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMastType)))
	})
}

// MastTypeNotNil applies the NotNil predicate on the "mastType" field.
func MastTypeNotNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMastType)))
	})
}

// MastTypeEqualFold applies the EqualFold predicate on the "mastType" field.
func MastTypeEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMastType), v))
	})
}

// MastTypeContainsFold applies the ContainsFold predicate on the "mastType" field.
func MastTypeContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMastType), v))
	})
}

// AdditionalAttributesEQ applies the EQ predicate on the "additionalAttributes" field.
func AdditionalAttributesEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesNEQ applies the NEQ predicate on the "additionalAttributes" field.
func AdditionalAttributesNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesIn applies the In predicate on the "additionalAttributes" field.
func AdditionalAttributesIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAdditionalAttributes), v...))
	})
}

// AdditionalAttributesNotIn applies the NotIn predicate on the "additionalAttributes" field.
func AdditionalAttributesNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAdditionalAttributes), v...))
	})
}

// AdditionalAttributesGT applies the GT predicate on the "additionalAttributes" field.
func AdditionalAttributesGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesGTE applies the GTE predicate on the "additionalAttributes" field.
func AdditionalAttributesGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesLT applies the LT predicate on the "additionalAttributes" field.
func AdditionalAttributesLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesLTE applies the LTE predicate on the "additionalAttributes" field.
func AdditionalAttributesLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesContains applies the Contains predicate on the "additionalAttributes" field.
func AdditionalAttributesContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesHasPrefix applies the HasPrefix predicate on the "additionalAttributes" field.
func AdditionalAttributesHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesHasSuffix applies the HasSuffix predicate on the "additionalAttributes" field.
func AdditionalAttributesHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesIsNil applies the IsNil predicate on the "additionalAttributes" field.
func AdditionalAttributesIsNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdditionalAttributes)))
	})
}

// AdditionalAttributesNotNil applies the NotNil predicate on the "additionalAttributes" field.
func AdditionalAttributesNotNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdditionalAttributes)))
	})
}

// AdditionalAttributesEqualFold applies the EqualFold predicate on the "additionalAttributes" field.
func AdditionalAttributesEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdditionalAttributes), v))
	})
}

// AdditionalAttributesContainsFold applies the ContainsFold predicate on the "additionalAttributes" field.
func AdditionalAttributesContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdditionalAttributes), v))
	})
}

// EquipmentEQ applies the EQ predicate on the "equipment" field.
func EquipmentEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipment), v))
	})
}

// EquipmentNEQ applies the NEQ predicate on the "equipment" field.
func EquipmentNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipment), v))
	})
}

// EquipmentIn applies the In predicate on the "equipment" field.
func EquipmentIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquipment), v...))
	})
}

// EquipmentNotIn applies the NotIn predicate on the "equipment" field.
func EquipmentNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquipment), v...))
	})
}

// EquipmentGT applies the GT predicate on the "equipment" field.
func EquipmentGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipment), v))
	})
}

// EquipmentGTE applies the GTE predicate on the "equipment" field.
func EquipmentGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipment), v))
	})
}

// EquipmentLT applies the LT predicate on the "equipment" field.
func EquipmentLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipment), v))
	})
}

// EquipmentLTE applies the LTE predicate on the "equipment" field.
func EquipmentLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipment), v))
	})
}

// EquipmentContains applies the Contains predicate on the "equipment" field.
func EquipmentContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEquipment), v))
	})
}

// EquipmentHasPrefix applies the HasPrefix predicate on the "equipment" field.
func EquipmentHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEquipment), v))
	})
}

// EquipmentHasSuffix applies the HasSuffix predicate on the "equipment" field.
func EquipmentHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEquipment), v))
	})
}

// EquipmentIsNil applies the IsNil predicate on the "equipment" field.
func EquipmentIsNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEquipment)))
	})
}

// EquipmentNotNil applies the NotNil predicate on the "equipment" field.
func EquipmentNotNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEquipment)))
	})
}

// EquipmentEqualFold applies the EqualFold predicate on the "equipment" field.
func EquipmentEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEquipment), v))
	})
}

// EquipmentContainsFold applies the ContainsFold predicate on the "equipment" field.
func EquipmentContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEquipment), v))
	})
}

// EngineEQ applies the EQ predicate on the "engine" field.
func EngineEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngine), v))
	})
}

// EngineNEQ applies the NEQ predicate on the "engine" field.
func EngineNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEngine), v))
	})
}

// EngineIn applies the In predicate on the "engine" field.
func EngineIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEngine), v...))
	})
}

// EngineNotIn applies the NotIn predicate on the "engine" field.
func EngineNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEngine), v...))
	})
}

// EngineGT applies the GT predicate on the "engine" field.
func EngineGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEngine), v))
	})
}

// EngineGTE applies the GTE predicate on the "engine" field.
func EngineGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEngine), v))
	})
}

// EngineLT applies the LT predicate on the "engine" field.
func EngineLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEngine), v))
	})
}

// EngineLTE applies the LTE predicate on the "engine" field.
func EngineLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEngine), v))
	})
}

// EngineContains applies the Contains predicate on the "engine" field.
func EngineContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEngine), v))
	})
}

// EngineHasPrefix applies the HasPrefix predicate on the "engine" field.
func EngineHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEngine), v))
	})
}

// EngineHasSuffix applies the HasSuffix predicate on the "engine" field.
func EngineHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEngine), v))
	})
}

// EngineEqualFold applies the EqualFold predicate on the "engine" field.
func EngineEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEngine), v))
	})
}

// EngineContainsFold applies the ContainsFold predicate on the "engine" field.
func EngineContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEngine), v))
	})
}

// HydraulicControlEQ applies the EQ predicate on the "hydraulicControl" field.
func HydraulicControlEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlNEQ applies the NEQ predicate on the "hydraulicControl" field.
func HydraulicControlNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlIn applies the In predicate on the "hydraulicControl" field.
func HydraulicControlIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHydraulicControl), v...))
	})
}

// HydraulicControlNotIn applies the NotIn predicate on the "hydraulicControl" field.
func HydraulicControlNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHydraulicControl), v...))
	})
}

// HydraulicControlGT applies the GT predicate on the "hydraulicControl" field.
func HydraulicControlGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlGTE applies the GTE predicate on the "hydraulicControl" field.
func HydraulicControlGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlLT applies the LT predicate on the "hydraulicControl" field.
func HydraulicControlLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlLTE applies the LTE predicate on the "hydraulicControl" field.
func HydraulicControlLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlContains applies the Contains predicate on the "hydraulicControl" field.
func HydraulicControlContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlHasPrefix applies the HasPrefix predicate on the "hydraulicControl" field.
func HydraulicControlHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlHasSuffix applies the HasSuffix predicate on the "hydraulicControl" field.
func HydraulicControlHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlEqualFold applies the EqualFold predicate on the "hydraulicControl" field.
func HydraulicControlEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHydraulicControl), v))
	})
}

// HydraulicControlContainsFold applies the ContainsFold predicate on the "hydraulicControl" field.
func HydraulicControlContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHydraulicControl), v))
	})
}

// DriveControlEQ applies the EQ predicate on the "driveControl" field.
func DriveControlEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDriveControl), v))
	})
}

// DriveControlNEQ applies the NEQ predicate on the "driveControl" field.
func DriveControlNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDriveControl), v))
	})
}

// DriveControlIn applies the In predicate on the "driveControl" field.
func DriveControlIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDriveControl), v...))
	})
}

// DriveControlNotIn applies the NotIn predicate on the "driveControl" field.
func DriveControlNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDriveControl), v...))
	})
}

// DriveControlGT applies the GT predicate on the "driveControl" field.
func DriveControlGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDriveControl), v))
	})
}

// DriveControlGTE applies the GTE predicate on the "driveControl" field.
func DriveControlGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDriveControl), v))
	})
}

// DriveControlLT applies the LT predicate on the "driveControl" field.
func DriveControlLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDriveControl), v))
	})
}

// DriveControlLTE applies the LTE predicate on the "driveControl" field.
func DriveControlLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDriveControl), v))
	})
}

// DriveControlContains applies the Contains predicate on the "driveControl" field.
func DriveControlContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDriveControl), v))
	})
}

// DriveControlHasPrefix applies the HasPrefix predicate on the "driveControl" field.
func DriveControlHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDriveControl), v))
	})
}

// DriveControlHasSuffix applies the HasSuffix predicate on the "driveControl" field.
func DriveControlHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDriveControl), v))
	})
}

// DriveControlEqualFold applies the EqualFold predicate on the "driveControl" field.
func DriveControlEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDriveControl), v))
	})
}

// DriveControlContainsFold applies the ContainsFold predicate on the "driveControl" field.
func DriveControlContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDriveControl), v))
	})
}

// CabinEQ applies the EQ predicate on the "cabin" field.
func CabinEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabin), v))
	})
}

// CabinNEQ applies the NEQ predicate on the "cabin" field.
func CabinNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCabin), v))
	})
}

// CabinIn applies the In predicate on the "cabin" field.
func CabinIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCabin), v...))
	})
}

// CabinNotIn applies the NotIn predicate on the "cabin" field.
func CabinNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCabin), v...))
	})
}

// CabinGT applies the GT predicate on the "cabin" field.
func CabinGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCabin), v))
	})
}

// CabinGTE applies the GTE predicate on the "cabin" field.
func CabinGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCabin), v))
	})
}

// CabinLT applies the LT predicate on the "cabin" field.
func CabinLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCabin), v))
	})
}

// CabinLTE applies the LTE predicate on the "cabin" field.
func CabinLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCabin), v))
	})
}

// CabinContains applies the Contains predicate on the "cabin" field.
func CabinContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCabin), v))
	})
}

// CabinHasPrefix applies the HasPrefix predicate on the "cabin" field.
func CabinHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCabin), v))
	})
}

// CabinHasSuffix applies the HasSuffix predicate on the "cabin" field.
func CabinHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCabin), v))
	})
}

// CabinEqualFold applies the EqualFold predicate on the "cabin" field.
func CabinEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCabin), v))
	})
}

// CabinContainsFold applies the ContainsFold predicate on the "cabin" field.
func CabinContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCabin), v))
	})
}

// LightsEQ applies the EQ predicate on the "lights" field.
func LightsEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLights), v))
	})
}

// LightsNEQ applies the NEQ predicate on the "lights" field.
func LightsNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLights), v))
	})
}

// LightsIn applies the In predicate on the "lights" field.
func LightsIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLights), v...))
	})
}

// LightsNotIn applies the NotIn predicate on the "lights" field.
func LightsNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLights), v...))
	})
}

// LightsGT applies the GT predicate on the "lights" field.
func LightsGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLights), v))
	})
}

// LightsGTE applies the GTE predicate on the "lights" field.
func LightsGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLights), v))
	})
}

// LightsLT applies the LT predicate on the "lights" field.
func LightsLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLights), v))
	})
}

// LightsLTE applies the LTE predicate on the "lights" field.
func LightsLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLights), v))
	})
}

// LightsContains applies the Contains predicate on the "lights" field.
func LightsContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLights), v))
	})
}

// LightsHasPrefix applies the HasPrefix predicate on the "lights" field.
func LightsHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLights), v))
	})
}

// LightsHasSuffix applies the HasSuffix predicate on the "lights" field.
func LightsHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLights), v))
	})
}

// LightsEqualFold applies the EqualFold predicate on the "lights" field.
func LightsEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLights), v))
	})
}

// LightsContainsFold applies the ContainsFold predicate on the "lights" field.
func LightsContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLights), v))
	})
}

// BatteryEQ applies the EQ predicate on the "battery" field.
func BatteryEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattery), v))
	})
}

// BatteryNEQ applies the NEQ predicate on the "battery" field.
func BatteryNEQ(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBattery), v))
	})
}

// BatteryIn applies the In predicate on the "battery" field.
func BatteryIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBattery), v...))
	})
}

// BatteryNotIn applies the NotIn predicate on the "battery" field.
func BatteryNotIn(vs ...string) predicate.MachineSpecification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBattery), v...))
	})
}

// BatteryGT applies the GT predicate on the "battery" field.
func BatteryGT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBattery), v))
	})
}

// BatteryGTE applies the GTE predicate on the "battery" field.
func BatteryGTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBattery), v))
	})
}

// BatteryLT applies the LT predicate on the "battery" field.
func BatteryLT(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBattery), v))
	})
}

// BatteryLTE applies the LTE predicate on the "battery" field.
func BatteryLTE(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBattery), v))
	})
}

// BatteryContains applies the Contains predicate on the "battery" field.
func BatteryContains(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBattery), v))
	})
}

// BatteryHasPrefix applies the HasPrefix predicate on the "battery" field.
func BatteryHasPrefix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBattery), v))
	})
}

// BatteryHasSuffix applies the HasSuffix predicate on the "battery" field.
func BatteryHasSuffix(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBattery), v))
	})
}

// BatteryIsNil applies the IsNil predicate on the "battery" field.
func BatteryIsNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBattery)))
	})
}

// BatteryNotNil applies the NotNil predicate on the "battery" field.
func BatteryNotNil() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBattery)))
	})
}

// BatteryEqualFold applies the EqualFold predicate on the "battery" field.
func BatteryEqualFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBattery), v))
	})
}

// BatteryContainsFold applies the ContainsFold predicate on the "battery" field.
func BatteryContainsFold(v string) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBattery), v))
	})
}

// HasMachine applies the HasEdge predicate on the "machine" edge.
func HasMachine() predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MachineTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MachineTable, MachineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMachineWith applies the HasEdge predicate on the "machine" edge with a given conditions (other predicates).
func HasMachineWith(preds ...predicate.Machine) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MachineInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MachineTable, MachineColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MachineSpecification) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MachineSpecification) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MachineSpecification) predicate.MachineSpecification {
	return predicate.MachineSpecification(func(s *sql.Selector) {
		p(s.Not())
	})
}
